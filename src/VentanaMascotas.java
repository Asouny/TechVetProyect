
import java.awt.Color;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import static javax.swing.JOptionPane.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author orozc
 */
public class VentanaMascotas extends javax.swing.JFrame {

    /**
     * Creates new form VentanaMascota
     */
    public VentanaMascotas() {
        initComponents();
        m = (DefaultTableModel) tblMascotas.getModel();
        leerMascotas();
        leerClientes();

        id++;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSexo = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        btnEliminar = new javax.swing.JButton();
        jcbSexo = new javax.swing.JComboBox<>();
        btnBuscar = new javax.swing.JButton();
        txtNombre = new javax.swing.JTextField();
        btnEditar = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        txtEdad = new javax.swing.JTextField();
        lblEdad = new javax.swing.JLabel();
        btnOrdenar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMascotas = new javax.swing.JTable();
        lblclie = new javax.swing.JLabel();
        jcbCliente = new javax.swing.JComboBox<>();
        lblespe = new javax.swing.JLabel();
        jcbEspecie = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblSexo.setText("Sexo:");

        lblNombre.setText("Nombre:");

        btnEliminar.setText("Eliminar");
        btnEliminar.setEnabled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jcbSexo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sexo", "H", "F" }));
        jcbSexo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbSexoActionPerformed(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNombreKeyPressed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.setEnabled(false);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        txtEdad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEdadKeyPressed(evt);
            }
        });

        lblEdad.setText("Edad:");

        btnOrdenar.setText("Ordenar");
        btnOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrdenarActionPerformed(evt);
            }
        });

        tblMascotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IdMascota", "Nombre", "Especie", "Edad", "Sexo", "IdCliente"
            }
        ));
        jScrollPane1.setViewportView(tblMascotas);

        lblclie.setText("Cliente:");

        jcbCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cliente" }));
        jcbCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbClienteActionPerformed(evt);
            }
        });

        lblespe.setText("Especie:");

        jcbEspecie.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Especie", "Dalmata", "Chihuahua" }));
        jcbEspecie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbEspecieActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblclie)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAgregar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEditar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEliminar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnOrdenar))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblNombre)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblSexo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcbSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16)
                                .addComponent(lblEdad)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblespe)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbEspecie, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBuscar)
                                .addGap(0, 75, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSexo)
                    .addComponent(jcbSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEdad)
                    .addComponent(txtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblespe))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregar)
                    .addComponent(jcbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblclie)
                    .addComponent(btnEditar)
                    .addComponent(btnEliminar)
                    .addComponent(btnOrdenar)
                    .addComponent(btnBuscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean validarMascotas(boolean b) {
        //validar nombre
        name = txtNombre.getText();
        if (name.equals("")) {
            showMessageDialog(this, "Falta ingresar el nombre");
            lblNombre.setForeground(Color.red);
            txtNombre.requestFocus();
            return b = false;
        }
        try {
            edad = Integer.parseInt(txtEdad.getText());
        } catch (NumberFormatException err) {
            showMessageDialog(this, "Solo numeros");
            lblEdad.setForeground(Color.red);
            txtEdad.requestFocus();
            return b = false;
        }
        if (edad == 0) {
            showMessageDialog(this, "Falta ingresar la edad");
            lblEdad.setForeground(Color.red);
            txtEdad.requestFocus();
            return b = false;
        }

        sex = jcbSexo.getSelectedItem().toString();
        if (sex.equals("Sexo")) {
            showMessageDialog(this, "Falta ingresar el sexo");
            lblSexo.setForeground(Color.red);
            jcbSexo.requestFocus();
            return b = false;
        }

        //for (Cliente cliente : VentanaClientes.C ) {
        //jcbCliente.addItem(String.valueOf(cliente.getId()));
        clie = jcbCliente.getSelectedItem().toString();
        if (clie.equals("Puesto")) {
            showMessageDialog(this, "Falta ingresar el Cliente");
            lblclie.setForeground(Color.red);
            jcbCliente.requestFocus();
            return b = false;
        }

        espe = jcbEspecie.getSelectedItem().toString();
        if (espe.equals("Puesto")) {
            showMessageDialog(this, "Falta ingresar el Especie");
            lblespe.setForeground(Color.red);
            jcbEspecie.requestFocus();
            return b = false;
        }

        return b;
    }

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        
        int boton = showConfirmDialog(this, "Seguro que quieres borrar?");
        if (boton == 0) {
            m.removeRow(pos);
            for (int i = pos; i < a; i++) {
                M[i] = M[i + 1];
                a--;
            }//for
            txtNombre.setText("");
            txtEdad.setText("");
            jcbSexo.setSelectedIndex(0);
            txtEdad.setText("");
            jcbEspecie.setSelectedIndex(0);
            jcbCliente.setSelectedIndex(0);
        }//if
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void jcbSexoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbSexoActionPerformed
        lblSexo.setForeground(Color.black);
    }//GEN-LAST:event_jcbSexoActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String no;
        no = txtNombre.getText();
        if (no.equals("")) {
            showMessageDialog(this, "Falta ingresar el Nombre");
            lblNombre.setForeground(Color.red);
            txtNombre.requestFocus();
            return;
        }
        for (int i = 0; i < a; i++) {
            if (no.equals(M[i].getNombre())) {
                txtNombre.setText(M[i].getNombre());
                txtEdad.setText(M[i].getEdad() + "");
                jcbCliente.setSelectedItem(M[i].getCliente());
                jcbSexo.setSelectedItem(M[i].getSexo());
                jcbEspecie.setSelectedItem(M[i].getEspecie());
                pos = 0;
                btnEditar.setEnabled(true);
                btnEliminar.setEnabled(true);
                return;
            }//if
        }//for
        showMessageDialog(this, "No encontrado");
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void txtNombreKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyPressed
        lblNombre.setForeground(Color.black);
    }//GEN-LAST:event_txtNombreKeyPressed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        boolean b = true;
        validarMascotas(b);
        if (b == true) {
            //editar nombre
            name = txtNombre.getText();
            M[pos].setNombre(name);
            m.setValueAt(name, pos, 0);

            sex = jcbSexo.getSelectedItem().toString();
            M[pos].setSexo(sex);
            m.setValueAt(sex, pos, 1);

            edad = Integer.parseInt(txtEdad.getText());
            M[pos].setEdad(edad);
            m.setValueAt(edad, pos, 2);

            clie = jcbCliente.getSelectedItem().toString();
            M[pos].setEspecie(clie);
            m.setValueAt(clie, pos, 4);

            espe = jcbEspecie.getSelectedItem().toString();
            M[pos].setEspecie(espe);
            m.setValueAt(espe, pos, 4);
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        boolean b = true;
        b = validarMascotas(b);
        if (b == true) {
            //String nombre, String especie, String sexo, String cliente, int id, int edad
            M[a++] = new Mascota(name, espe, sex, clie, id, edad);
            
            
            controlador.guardar("Mascotas", M);
            txtNombre.setText("");
            txtEdad.setText("");
            jcbSexo.setSelectedIndex(0);
            jcbCliente.setSelectedIndex(0);
            jcbEspecie.setSelectedIndex(0);
            id++;
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void txtEdadKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEdadKeyPressed

    }//GEN-LAST:event_txtEdadKeyPressed

    private void btnOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrdenarActionPerformed

    }//GEN-LAST:event_btnOrdenarActionPerformed

    private void jcbClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbClienteActionPerformed

    }//GEN-LAST:event_jcbClienteActionPerformed

    private void jcbEspecieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbEspecieActionPerformed

    }//GEN-LAST:event_jcbEspecieActionPerformed

    private void OrdenaNombre() {
        int n = a;
        for (int p = 1; p < n; p++) {//pasadas
            for (int i = 0; i < n - p; i++) {
                if (M[i].getNombre().compareTo(M[i + 1].getNombre()) > 0) {
                    Mascota t = new Mascota();
                    t = M[i];
                    M[i] = M[i + 1];
                    M[i + 1] = t;
                }//if
            }//for
        }//for
    }

    public void llenaTabla() {
        for (int i = 0; i < a; i++) {
            m.setValueAt(M[i].getNombre(), i, 0);
            m.setValueAt(M[i].getSexo(), i, 1);
            m.setValueAt(M[i].getEdad(), i, 2);
            m.setValueAt(M[i].getCliente(), i, 3);
            m.setValueAt(M[i].getEspecie(), i, 4);
        }
    }

    private void leerClientes() {

        C = (Cliente[]) controlador.leer("Clientes", Cliente.class);

        // Agregar los clientes al combo box
        for (Cliente cliente : C) {
            if (cliente == null) {
                return; //si el renglon que quiere agregar está vacío, no lo agregará y no marcará error
            }
            String item = cliente.getId() + " - " + cliente.getNombre();
            jcbCliente.addItem(item);

        }
    }

    private void leerMascotas() {

        M = (Mascota[]) controlador.leer("Mascotas", Mascota.class);
        Object R[] = new Object[6];
        m.setRowCount(0);
        //ciclo que si se cumple, manda a agregar a la tabla para cuando inicie el programa de nuevo
        for (int i = 0; i < M.length; i++) {
            if (M[i] == null) {
                return; //si el renglon que quiere agregar está vacío, no lo agregará y no marcará error
            }
            id = M[i].getId();
            R[1] = M[i].getNombre();
            R[2] = M[i].getEspecie();
            R[3] = M[i].getEdad();
            R[4] = M[i].getSexo();

            int espacioBlancoIndex = M[i].getCliente().indexOf(" ");

            String clienteNumero = M[i].getCliente().substring(0, espacioBlancoIndex);
            
            int clienteNumeroEntero = Integer.parseInt(clienteNumero);

           if(C[i]!= null){
                   int clienteEncontradoID = buscaCliente(clienteNumeroEntero, C);
            R[5] = C[clienteEncontradoID].toString().substring(0, 2);
           }else{
            m.addRow(R);
            a++;
        }
        }
    }

    public int buscaMascota(int ca, Mascota A[]) {
        for (int i = 0; i < a; i++) {
            if (ca == M[i].getId()) {
                if (M[i] == null) {
                    return -1; //si el renglon que quiere agregar está vacío, no lo agregará y no marcará error
                }
                return i; //Return el arreglo en esa posición
            }//Para que compare id (parámetro) con id del arreglo
        }
        return -1; //Por si no los encontró
    }

    public int buscaCliente(int ca, Cliente A[]) {
        for (int i = 0; i < A.length; i++) {
            if (ca == C[i].getId()) {
                if (C[i] == null) {
                    return -1; //si el renglon que quiere agregar está vacío, no lo agregará y no marcará error
                }
                return i; //Return el arreglo en esa posición
            }//Para que compare id (parámetro) con id del arreglo
        }
        return -1; //Por si no los encontró
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaMascotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaMascotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaMascotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaMascotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaMascotas().setVisible(true);
            }
        });
    }

    private Mascota M[] = new Mascota[30];
    private int id, edad;
    private int a = 0, pos = -1;
    private String name, sex, espe, clie;
    private DefaultTableModel m;
    private int c = 0;

    private Cliente C[] = new Cliente[30];
    Controller controlador = new Controller();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnOrdenar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcbCliente;
    private javax.swing.JComboBox<String> jcbEspecie;
    private javax.swing.JComboBox<String> jcbSexo;
    private javax.swing.JLabel lblEdad;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblSexo;
    private javax.swing.JLabel lblclie;
    private javax.swing.JLabel lblespe;
    private javax.swing.JTable tblMascotas;
    private javax.swing.JTextField txtEdad;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
